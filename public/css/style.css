html{
    box-sizing: border-box;
}

body
{
    display: flex;
    flex-direction: row;
}

*, *::before, *::after{
    box-sizing: inherit;
}

:root
{
    --cell-size: 50px;
}

.white
{
    background-color: #fffaf5;
    color: black;
}

.black
{
    background-color: #453505;
    color: white;
}

.force-overlap
{
    display: grid;
  
    /* Set horizontal alignment of items in, case they have a different width. */
    /* justify-items: start | end | center | stretch (default); */
    justify-items: start;
  
    /* Set vertical alignment of items, in case they have a different height. */
    /* align-items: start | end | center | stretch (default); */
    align-items: start;
}

/* Cause all descendents to be overlap */
.force-overlap > * {
    grid-column-start: 1;
    grid-row-start: 1;
}

.grid-cell
{
    height: var(--cell-size);
    width: var(--cell-size);
    margin: 0px;
    padding: 0px;
}

.positions
{
    position: relative;
    font-size: calc(var(--cell-size)/4.5);
    z-index: 0;
    font-weight: bold;
}

.supersleft
{  
    left: 0.20em;
    top: 0.20em; /* Since text is displayed in center of span, we need to translate it up */
}

.subsright
{
    left: 3.5em;
    top: 3em;
}

.piece
{
    width: 100%;
    height: 100%;
    position: static;
    z-index: 1;
}

.captured-piece
{
    position: absolute;
    height: 100%;
}

.dragging-piece
{
    width: calc(var(--cell-size)*1.15);
    height: calc(var(--cell-size)*1.15);
    display: block;
    position: absolute;
    z-index: 2;
}

.dragging-piece:hover
{
    cursor: grabbing;
}

.piece:hover
{
    cursor: grab;
}

table.noselect
{
    user-select: none;
}

table.no-spacing
{
    border-spacing: 0;
    border-collapse: collapse;
}


/* Give the table its proper shape */
#chessboard
{
    table-layout: fixed;
}

.chess-cell {
    border: 1px solid black;
    padding: 0px;
    width: var(--cell-size);
}

.captured-cell
{
    height: calc(var(--cell-size)*0.8);
    position: relative; /* For absolute position of captured pieces to work */
}

#chat-area
{
    margin: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    width: 40%;
}

#chat-input
{
    display: block;
}

#chat-textbox
{
    border-width: 2px;
    border-color: black;
    border-style: solid;
    width: 100%;
    height: 50%;
}
